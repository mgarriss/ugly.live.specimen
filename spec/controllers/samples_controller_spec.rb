require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe SamplesController do
  before(:each) do
    @tempfile = Tempfile.new('ugly.live.specimen')
  end
  
  after(:each) do
    @tempfile.delete
  end

  # This should return the minimal set of attributes required to create a valid
  # Sample. As you add validations to Sample, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {path:@tempfile.path}
  end

  describe "GET index" do
    it "assigns all samples as @samples" do
      sample = Sample.create! valid_attributes
      get :index
      assigns(:samples).should eq([sample])
    end
  end

  describe "GET show" do
    it "assigns the requested sample as @sample" do
      sample = Sample.create! valid_attributes
      get :show, :id => sample.id
      assigns(:sample).should eq(sample)
    end
  end

  describe "GET new" do
    it "return 404" do
      pending
    end
  end

  describe "GET edit" do
    it "assigns the requested sample as @sample" do
      pending
      sample = Sample.create! valid_attributes
      get :edit, :id => sample.id
      assigns(:sample).should eq(sample)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "doesn't work" do
        pending
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved sample as @sample" do
        pending
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested sample" do
        sample = Sample.create! valid_attributes
        # Assuming there are no other samples in the database, this
        # specifies that the Sample created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Sample.any_instance.should_receive(:update_attributes).with({'these' => 'params'})
        put :update, :id => sample.id, :sample => {'these' => 'params'}
      end

      it "assigns the requested sample as @sample" do
        sample = Sample.create! valid_attributes
        put :update, :id => sample.id, :sample => valid_attributes
        assigns(:sample).should eq(sample)
      end

      it "redirects to the sample" do
        sample = Sample.create! valid_attributes
        put :update, :id => sample.id, :sample => valid_attributes
        response.should redirect_to(sample)
      end
    end

    describe "with invalid params" do
      it "assigns the sample as @sample" do
        sample = Sample.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        pending
        Sample.any_instance.stub(:save).and_return(false)
        put :update, :id => sample.id, :sample => {}
        assigns(:sample).should eq(sample)
      end

      it "re-renders the 'edit' template" do
        sample = Sample.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Sample.any_instance.stub(:save).and_return(false)
        put :update, :id => sample.id, :sample => {}
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested sample" do
      pending
      sample = Sample.create! valid_attributes
      expect {
        delete :destroy, :id => sample.id
      }.to change(Sample, :count).by(-1)
    end

    it "redirects to the samples list" do
      sample = Sample.create! valid_attributes
      delete :destroy, :id => sample.id
      response.should redirect_to(samples_url)
    end
  end

end
